<!DOCTYPE html>
<html>

<head>
    <meta charset='utf-8'>
    <meta http-equiv='X-UA-Compatible' content='IE=edge'>
    <title>Admin</title>
    <meta name='viewport' content='width=device-width, initial-scale=1'>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/js/bootstrap.bundle.min.js">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/boxicons@latest/css/boxicons.min.css">

    <style>
        .confirmation-modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }

        .confirmation-content {
            background-color: white;
            padding: 20px;
            border-radius: 8px;
            text-align: center;
            box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.3);
        }

        .confirmation-buttons {
            margin-top: 10px;
        }

        .confirmation-buttons button {
            margin: 0 10px;
            padding: 5px 10px;
            border: none;
            cursor: pointer;
        }

        .confirmation-buttons button.confirm {
            background-color: red;
            color: white;
        }

        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f4;
        }

        .container {
            padding: 20px;
            background-color: #fff;
            box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
            border-radius: 5px;
        }

        .input-group {
            margin-bottom: 20px;
        }

        .form-control {
            border-radius: 5px;
        }

        .btn-primary {
            background-color: #007bff;
            border-color: #007bff;
        }

        .btn-primary:hover {
            background-color: #0056b3;
            border-color: #0056b3;
        }

        .table th,
        .table td {
            vertical-align: middle;
        }

        .edit-button {
            padding: 5px 10px;
        }

        @import url("https://fonts.googleapis.com/css2?family=Nunito:wght@400;600;700&display=swap");

        :root {
            --header-height: 3rem;
            --nav-width: 68px;
            --first-color: #4723D9;
            --first-color-light: #AFA5D9;
            --white-color: #F7F6FB;
            --body-font: 'Nunito', sans-serif;
            --normal-font-size: 1rem;
            --z-fixed: 100
        }

        *,
        ::before,
        ::after {
            box-sizing: border-box
        }

        body {
            position: relative;
            margin: var(--header-height) 0 0 0;
            padding: 0 1rem;
            font-family: var(--body-font);
            font-size: var(--normal-font-size);
            transition: .5s
        }

        a {
            text-decoration: none
        }

        .header {
            width: 100%;
            height: var(--header-height);
            position: fixed;
            top: 0;
            left: 0;
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 0 1rem;
            background-color: var(--white-color);
            z-index: var(--z-fixed);
            transition: .5s
        }

        .header_toggle {
            color: var(--first-color);
            font-size: 1.5rem;
            cursor: pointer
        }

        .header_img {
            width: 35px;
            height: 35px;
            display: flex;
            justify-content: center;
            border-radius: 50%;
            overflow: hidden
        }

        .header_img img {
            width: 40px
        }

        .l-navbar {
            position: fixed;
            top: 0;
            left: -30%;
            width: var(--nav-width);
            height: 100vh;
            background-color: var(--first-color);
            padding: .5rem 1rem 0 0;
            transition: .5s;
            z-index: var(--z-fixed)
        }

        .nav {
            height: 100%;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            overflow: hidden
        }

        .nav_logo,
        .nav_link {
            display: grid;
            grid-template-columns: max-content max-content;
            align-items: center;
            column-gap: 1rem;
            padding: .5rem 0 .5rem 1.5rem
        }

        .nav_logo {
            margin-bottom: 2rem
        }

        .nav_logo-icon {
            font-size: 1.25rem;
            color: var(--white-color)
        }

        .nav_logo-name {
            color: var(--white-color);
            font-weight: 700
        }

        .nav_link {
            position: relative;
            color: var(--first-color-light);
            margin-bottom: 1.5rem;
            transition: .3s
        }

        .nav_link:hover {
            color: var(--white-color)
        }

        .nav_icon {
            font-size: 1.25rem
        }

        .show {
            left: 0
        }

        .body-pd {
            padding-left: calc(var(--nav-width) + 1rem)
        }

        .active {
            color: var(--white-color)
        }

        .active::before {
            content: '';
            position: absolute;
            left: 0;
            width: 2px;
            height: 32px;
            background-color: var(--white-color)
        }

        .height-100 {
            height: 100vh
        }

        @media screen and (max-width: 768px) {
            .header {
                padding: 0 1rem;
            }

            .l-navbar {
                padding: 1rem 1rem 0 0;
            }

            body {
                padding: calc(var(--header-height) + 1rem);
            }

            .input-group {
                width: 100%;
            }
        }
    </style>
</head>

<body>

    <body id="body-pd">
        <header class="header" id="header">
            <div class="header_toggle"> <i class='bx bx-menu' id="header-toggle"></i> </div>

        </header>
        <div class="l-navbar" id="nav-bar">
            <nav class="nav">
                <div>
                    <div class="nav_list">
                        <a href="/admin/dashboard" class="nav_link">
                            <i class='bx bx-grid-alt nav_icon'></i>
                            <span class="nav_name">Dashboard</span>
                        </a>
                        <a href="/admin/upload" class="nav_link active">
                            <i class='bx bx-image-add nav_icon'></i>
                            <span class="nav_name">Upload Pictures</span>
                        </a>
                        <a href="/adminBooking" class="nav_link active">
                            <i class='bx bx-book-add nav_icon'></i>
                            <span class="nav_name">Admin Booking</span>
                        </a>
                    </div>
                </div> <a id="logout" class="nav_link"> <i class='bx bx-log-out nav_icon'></i> <span
                        class="nav_name">SignOut</span>
                </a>
            </nav>
        </div>
        <!--Container Main start-->
        <div class="height-100 bg-light">
            <div class="container mt-4">
                <div class="row">
                    <div class="col-md-4 ">
                        <div class="input-group mb-3">
                            <input type="text" class="form-control" placeholder="Search by Name, Phone or Order Id"
                                id="searchInput">
                            <button class="btn btn-outline-secondary" type="button" id="searchButton">Search</button>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-12">

                        <table class="table table-striped">
                            <thead>
                                <tr style="text-transform: capitalize; text-align: left;">
                                    <th>Id</th>
                                    <th>Name</th>
                                    <th>Phone</th>
                                    <th>Date</th>
                                    <th>Slot</th>
                                    <th>Theater</th>
                                    <th>People</th>
                                    <th>Cake</th>
                                    <th>Celebration Type</th>
                                    <th>Add On </th>
                                    <th>Amount</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                            <tbody id="bookingTableBody"
                                style="text-transform: capitalize; font-size:small; text-align: left;">
                                <% data.forEach(ele=> { %>
                                    <tr>
                                        <td>
                                            <%= ele.orderId %>
                                        </td>
                                        <td>
                                            <%= ele.name %>
                                        </td>
                                        <td>
                                            <%= ele.contactId %>
                                        </td>

                                        <td class="date-cell">
                                            <%= ele.date %>
                                        </td>
                                        <td class="slot-cell">
                                            <%= ele.slotInfo %>
                                        </td>
                                        <td>
                                            <%= ele.theaterName %>
                                        </td>
                                        <td>
                                            <%= ele.noOfPerson %>
                                        </td>
                                        <td>
                                            <%= ele.cakeName %>
                                        </td>
                                        <td>
                                            <%= ele.decorationName %>
                                        </td>
                                        <td>
                                            <%= ele.addOn %>
                                        </td>
                                        <td>
                                            <%= ele.amount %>
                                        </td>
                                        <td class="action-cell">
                                            <button class="btn btn-success btn-sm save-button"
                                                style="display: none;">Save</button>
                                            <button class="btn btn-danger btn-sm clear-button"
                                                style="display: none;">Clear</button>
                                            <button class="btn btn-primary btn-sm edit-button">Edit</button>
                                        </td>
                                    </tr>
                                    <% }); %>
                            </tbody>
                    </div>
                    </table>
                </div>
            </div>
        </div>

        </div>


        <div class="confirmation-modal" id="logoutConfirmationModal">
            <div class="confirmation-content">
                <p>Are you sure you want to log out?</p>
                <div class="confirmation-buttons">
                    <button class="confirm" id="confirmLogout">Yes</button>
                    <button id="cancelLogout">Cancel</button>
                </div>
            </div>
        </div>
        <script>
            const bookingTableBody = document.getElementById('bookingTableBody');
            async function fetchDataFromAPI(query) {
                try {
                    const response = await fetch(`/admin/search?search=${query}`);
                    const data = await response.json();
                    return data;
                } catch (error) {
                    console.error("Error fetching data:", error);
                    return [];
                }
            }
            async function searchBookings(query) {
                const { data } = await fetchDataFromAPI(query);

                if (data.length > 0) {
                    populateTable(data);
                } else {
                    // Display a message indicating no results found
                    bookingTableBody.innerHTML = `<tr>
                    <td colspan="10" class="text-center">No results found</td>
                </tr>`;;
                }
            }


            searchButton.addEventListener('click', async () => {
                await searchBookings(searchInput.value);
            });

            searchInput.addEventListener('keyup', async (event) => {
                if (event.key === 'Enter') {
                    await searchBookings(searchInput.value);
                }
            });
            function populateTable(data) {
                // Clear the existing content
                bookingTableBody.innerHTML = "";

                data.forEach(ele => {
                    const row = `
                    <tr>
            <td>${ele.orderId}</td>
            <td>${ele.name}</td>
            <td>${ele.contactId}</td>
            <td class="date-cell">
                ${ele.date}
            </td>
            <td class="slot-cell">
                ${ele.slotInfo}
            </td>
            <td>${ele.theaterName}</td>
            <td>${ele.cakeName}</td>
            <td>${ele.decorationName}</td>
            <td>${ele.addOn}</td>
            <td>Rs.${ele.amount}</td>
            <td class="action-cell">
                <button class="btn btn-success btn-sm save-button" style="display: none;">Save</button>
                <button class="btn btn-danger btn-sm clear-button" style="display: none;">Clear</button>
                <button class="btn btn-primary btn-sm edit-button">Edit</button>
            </td>
        </tr>
        
        `;
                    bookingTableBody.insertAdjacentHTML('beforeend', row);

                });
            }




            document.addEventListener("DOMContentLoaded", function (event) {

                const showNavbar = (toggleId, navId, bodyId, headerId) => {
                    const toggle = document.getElementById(toggleId),
                        nav = document.getElementById(navId),
                        bodypd = document.getElementById(bodyId),
                        headerpd = document.getElementById(headerId)

                    // Validate that all variables exist
                    if (toggle && nav && bodypd && headerpd) {
                        toggle.addEventListener('click', () => {
                            // show navbar
                            nav.classList.toggle('show')
                            // change icon
                            toggle.classList.toggle('bx-x')
                            // add padding to body
                            bodypd.classList.toggle('body-pd')
                            // add padding to header
                            headerpd.classList.toggle('body-pd')
                        })
                    }
                }

                showNavbar('header-toggle', 'nav-bar', 'body-pd', 'header')

                /*===== LINK ACTIVE =====*/
                const linkColor = document.querySelectorAll('.nav_link')

                function colorLink() {
                    if (linkColor) {
                        linkColor.forEach(l => l.classList.remove('active'))
                        this.classList.add('active')
                    }
                }
                linkColor.forEach(l => l.addEventListener('click', colorLink))

                function loadUploadComponent() {
                    fetch('/admin/uplaod') // Replace with the actual path to your EJS upload component
                        .then(response => response.text())
                        .then(content => {
                            mainContent.innerHTML = content;
                        })
                        .catch(error => {
                            console.error('Error loading upload component:', error);
                        });
                }

                // Assuming you have a button with the id "uploadButton"
                const uploadButton = document.getElementById('uploadButton');
                uploadButton.addEventListener('click', loadUploadComponent);
            });

            const logoutButton = document.getElementById("logout");
            const logoutConfirmationModal = document.getElementById("logoutConfirmationModal");
            const confirmLogoutButton = document.getElementById("confirmLogout");
            const cancelLogoutButton = document.getElementById("cancelLogout");

            // Event listener for Log Out button
            logoutButton.addEventListener("click", () => {
                logoutConfirmationModal.style.display = "flex"; // Display the modal
            });

            // Event listener for confirm Log Out button
            confirmLogoutButton.addEventListener("click", () => {
                // Redirect the user to the logout URL
                window.location.href = "/admin/logout"; // Replace with the actual logout URL
            });

            // Event listener for cancel Log Out button
            cancelLogoutButton.addEventListener("click", () => {
                logoutConfirmationModal.style.display = "none"; // Hide the modal
            });

            function enableEditFields(row) {
                const dateCell = row.querySelector(".date-cell");
                const slotCell = row.querySelector(".slot-cell");
                const actionCell = row.querySelector(".action-cell");
                const dateInput = document.querySelector(".date-picker");

                const dateValue = dateCell.textContent;
                const slotValue = slotCell.textContent;
                const todayIST = new Date();
                todayIST.setHours(todayIST.getHours() + 5); // Add 5 hours for UTC+5
                todayIST.setMinutes(todayIST.getMinutes() + 30); // Add 30 minutes for UTC+5:30

                const todayISTFormatted = todayIST.toISOString().split("T")[0];

                // Replace date cell content with a date picker
                dateCell.innerHTML = `<input type="date" class="form-control date-picker"  min="${todayISTFormatted}" required>`;



                actionCell.innerHTML = `
            <button class="btn btn-success btn-sm save-button">Save</button>
            <button class="btn btn-danger btn-sm clear-button">Clear</button>
        `;

                // Clear button click event
                const clearButton = row.querySelector(".clear-button");
                clearButton.addEventListener("click", () => {
                    // Restore original values
                    dateCell.innerHTML = dateValue;
                    slotCell.innerHTML = slotValue;
                    actionCell.innerHTML = `
                <button class="btn btn-primary btn-sm edit-button">Edit</button>
            `;

                    // Reattach edit button event listener
                    const editButton = row.querySelector(".edit-button");
                    editButton.addEventListener("click", () => {
                        enableEditFields(row);
                    });
                });

            }

            // Assuming you have a reference to the table with id "bookingTable"
            const bookingTable = document.getElementById("bookingTableBody");
            bookingTable.addEventListener("change", async event => {
                const target = event.target;
                const row = target.closest("tr");
                const orderId = row.querySelector("td:first-child").textContent;

                if (target.classList.contains("date-picker")) {
                    const selectedDate = formatDateFromISOToDMY(target.value);

                    if (selectedDate) {
                        try {
                            const response = await fetch(`/theater/getSlotInfo`, {
                                method: "POST",
                                headers: {
                                    "Content-Type": "application/json",
                                },
                                body: JSON.stringify({
                                    orderId: parseInt(orderId), // Replace with the actual theater ID
                                    dateValue: selectedDate,
                                }),
                            });

                            if (!response.ok) {
                                throw new Error(`API Request Error: ${response.statusText}`);
                            }

                            const responseData = await response.json();
                            updateSlotDropdown(row, responseData.data);
                            // Process the responseData to update slot display
                            // updateSlotDisplay(selectedDate, responseData.data, theaterId);
                        } catch (error) {
                            console.error(error.message);
                        }
                    }
                }
            });
            bookingTable.addEventListener("click", async (event) => {
                const target = event.target;

                if (target.classList.contains("edit-button")) {
                    const row = target.closest("tr");
                    enableEditFields(row);
                }
                else if (target.classList.contains("save-button")) {
                    const row = target.closest("tr");
                    const orderId = row.querySelector("td:first-child").textContent;
                    const selectedDateInput = row.querySelector(".date-picker");
                    const selectedDate = selectedDateInput.value;

                    // Get the selected slot ID from the dropdown
                    const selectedSlotDropdown = row.querySelector(".slot-dropdown");
                    const selectedSlotId = selectedSlotDropdown.value;
                    try {
                        const response = await fetch("/admin/updateBooking", {
                            method: "POST",
                            headers: {
                                "Content-Type": "application/json",
                            },
                            body: JSON.stringify({
                                bookingId: parseInt(orderId),
                                newBookingDate: formatDateFromISOToDMY(selectedDate),
                                newSlotId: parseInt(selectedSlotId),
                            }),
                        });

                        if (!response.ok) {
                            throw new Error(`API Request Error: ${response.statusText}`);
                        }

                        const responseData = await response.json();
                        // Update the row content with the new data
                        row.querySelector(".date-cell").textContent = formatDateFromISOToDMY(selectedDate);
                        row.querySelector(".slot-cell").textContent = responseData.slotValue;
                        // Update other fields as needed

                        // Disable the edit mode and revert to original content
                        const actionCell = row.querySelector(".action-cell");
                        actionCell.innerHTML = `
                <button class="btn btn-primary btn-sm edit-button">Edit</button>
            `;

                    } catch (error) {
                        console.error(error.message);
                    }
                }
                else if (target.classList.contains("clear-button")) {
                    // Clear the edit mode and revert to original content
                    const row = target.closest("tr");
                    // Clear row content
                    // ...
                }
            });

            function updateSlotDropdown(row, slotData) {
                const slotCell = row.querySelector(".slot-cell");

                if (slotData.length > 0) {
                    const selectDropdown = document.createElement("select");
                    selectDropdown.className = "form-select slot-dropdown"; // Add necessary classes

                    slotData.forEach(slot => {
                        if (!slot.booked) {
                            const option = document.createElement("option");
                            option.value = slot.id;
                            option.textContent = slot.slotname;
                            selectDropdown.appendChild(option);
                        }
                    });

                    slotCell.innerHTML = ""; // Clear existing content
                    slotCell.appendChild(selectDropdown); // Append the new dropdown

                    // Enable the dropdown
                    selectDropdown.disabled = false;
                } else {
                    slotCell.innerHTML = '<select class="form-select slot-dropdown" disabled><option value="" disabled selected>No slots available</option></select>';
                }
            }

            function formatDateFromISOToDMY(isoDate) {
                const parts = isoDate.split("-");
                if (parts.length !== 3) {
                    throw new Error("Invalid ISO date format");
                }

                const year = parts[0];
                const month = parts[1];
                const day = parts[2];

                return `${day}/${month}/${year}`;
            }

            // document.querySelectorAll(".slot-cell").forEach(slotCell => {
            //     const slotValue = slotCell.textContent;
            //     slotCell.innerHTML = slotValue;
            //     slotDropdown.disabled = true;
            // });
        </script>
    </body>

</html>